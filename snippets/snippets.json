{
  "reactClassComponent": {
    "prefix": "rcc",
    "body": "import React from 'react';\n\nexport default class ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}} extends React.Component {\n\tstate = {};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"${2:${TM_FILENAME_BASE}}\">\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n",
    "description": "Class Component (You are probably using local state or lifecycle methods)"
  },
  "reactClassComponentWithProps": {
    "prefix": "rccp",
    "body": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}} extends React.Component {\n\tstatic propTypes = {\n\t\t${2:propName}: PropTypes.${3|string,func,bool,number,array,object,oneOfType,node|}${4:.isRequired},\n\t};\n\n\t${5:static defaultProps = {\n\t\t${2:propName}: ${6:''},\n\t\\};}\n\n\tstate = {\n\t\t${7}\n\t};\n\n\trender() {\n\t\tconst { ${2:propName} } = this.props;\n\t\treturn (\n\t\t\t<div className=\"${8:${TM_FILENAME_BASE}}\">\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n};\n",
    "description": "Class Component (You are probably using local state or lifecycle methods), with props"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": "import React from 'react';\n\nfunction ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}() {\n\treturn (\n\t\t<div className=\"${2:${TM_FILENAME_BASE}}\">\n\t\t\t$0\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};\n",
    "description": "Functional React Component"
  },
  "reactFunctionalComponentWithProps": {
    "prefix": "rfcp",
    "body": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ${1:${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}}({ ${2:propName} }) {\n\treturn (\n\t\t<div className=\"${6:${TM_FILENAME_BASE}}\">\n\t\t\t$0\n\t\t</div>\n\t);\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t${2:propName}: PropTypes.${3|string,func,bool,number,array,object,oneOfType,node|},\n};\n\n${4:${1:${TM_FILENAME_BASE}}.defaultProps = {\n\t${2:propName}: ${5:''},\n\\};}\n\nexport default ${1:${TM_FILENAME_BASE}};\n",
    "description": "Functional React Component with Props"
  },
  "setStateWithPrevState": {
    "prefix": "ssps",
    "body": "this.setState(prevState => ({\n\t${1:stateProperty}: prevState.${1:stateProperty},\n}));",
    "description": "Set State Using the Previous State"
  },
  "mapStateToPropsShorthand": {
    "prefix": "mstpsh",
    "body": "const mapStateToProps = state => ({\n\t${1:stateProperty}: state.${1:stateProperty},\n});",
    "description": "Map State to Props, Shorthand"
  },
  "mapStateToProps": {
    "prefix": "mstp",
    "body": "const mapStateToProps = state => {\n\treturn {\n\t\t${1:stateProperty}: state.${1:stateProperty},\n\t};\n};",
    "description": "Map State to Props"
  },
  "mapDispatchToProps": {
    "prefix": "mdtp",
    "body": "const mapDispatchToProps = dispatch => ({\n\t${1:actionName}: (${2:params}) => dispatch(${1:actionName}(${2:params})),\n});",
    "description": "Map Dispatch to Props"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type, use sparingly, shape is often better"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required, use sparingly, shape is often better"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "ptone",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "ptoner",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptoneoft",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptoneofr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "propTypeAny": {
    "prefix": "ptany",
    "body": "PropTypes.any,",
    "description": "A value of any data type"
  },
  "propTypeAnyRequired": {
    "prefix": "ptanyr",
    "body": "PropTypes.any.isRequired,",
    "description": "A value of any data type that is required"
  },
  "propTypeDate": {
    "prefix": "ptd",
    "body": "PropTypes.Date,",
    "description": "A Date object"
  },
  "propTypeDateRequired": {
    "prefix": "ptdr",
    "body": "PropTypes.Date.isRequired,",
    "description": "A Date object that is required"
  },
  "oliveButtonImport": {
    "prefix": "impobtn",
    "body": "import Button from 'olive-components/lib/button';",
    "description": "import olive-components button"
  },
  "oliveButton": {
    "prefix": "obtn",
    "body": "<Button\n\t${1:label=\"${2}\"}\n\t${3:color={Button.COLOR.${4|BLUE_OUTLINE,CLEAR,CLEAR_GREY,GREY_OUTLINE,PURPLE,PURPLE_LIGHT,PURPLE_OUTLINE,WARNING|}}}\n\tonClick={$0}\n/>",
    "description": "olive-components button"
  },
  "oliveIconButtonImport": {
    "prefix": "impoiconbtn",
    "body": "import IconButton from 'olive-components/lib/iconButton';",
    "description": "import olive-components iconbutton"
  },
  "oliveIconButton": {
    "prefix": "oiconbtn",
    "body": "<IconButton\n\ticon={IconButton.ICON.${1}}\n\t${2:buttonSize={IconButton.SIZE.${3|TINY,XXSM,XSM,SM,NORMAL,LG,XLG,XXLG|}}}\n\t${4:iconSize={IconButton.SIZE.${5|TINY,XXSM,XSM,SM,NORMAL,LG,XLG,XXLG|}}}\n\t${6:color={IconButton.COLOR.${7|BLUE_OUTLINE,CLEAR,CLEAR_GREY,GREY_OUTLINE,PURPLE,PURPLE_LIGHT,PURPLE_OUTLINE,WARNING|}}}\n\tonClick={$0}\n/>",
    "description": "olive-components icon button"
  },
  "oliveIconImport": {
    "prefix": "impoicon",
    "body": "import Icon from 'olive-components/lib/icon';",
    "description": "import olive-components iconbutton"
  },
  "oliveIcon": {
    "prefix": "oicon",
    "body": "<Icon icon={Icon.ICON.${2}} ${3:size={IconButton.SIZE.${4|TINY,XXSM,XSM,SM,NORMAL,LG,XLG,XXLG|}}}/>",
    "description": "olive-components icon"
  },
  "oliveInput": {
    "prefix": "oinput",
    "body": "<Input \n\tlabel=\"${1}\"\n\tvalue={${2:value}}\n\t${3:required}\n\tonChange={$0}\n/>",
    "description": "olive-components input"
  },
  "oliveInputImprt": {
    "prefix": "impoinput",
    "body": "import Input from 'olive-components/lib/input';",
    "description": "imput olive-components input"
  }
}